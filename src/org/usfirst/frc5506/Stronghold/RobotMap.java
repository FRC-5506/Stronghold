// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Stronghold;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftMotors;
    public static SpeedController driveTrainrightMotors;
    public static RobotDrive driveTrainMotors;
    public static SpeedController loadermotor;
    public static CANTalon launcherwinchMotor;
    public static SpeedController launcherreleaseMotor;
    public static Encoder launcherwinchRotations;
    public static SpeedController scalingArmturretMotor;
    public static SpeedController scalingArmextendMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftMotors = new Victor(0);
        LiveWindow.addActuator("DriveTrain", "leftMotors", (Victor) driveTrainleftMotors);
        
        driveTrainrightMotors = new Victor(1);
        LiveWindow.addActuator("DriveTrain", "rightMotors", (Victor) driveTrainrightMotors);
        
        driveTrainMotors = new RobotDrive(driveTrainleftMotors, driveTrainrightMotors);
        
        driveTrainMotors.setSafetyEnabled(true);
        driveTrainMotors.setExpiration(0.1);
        driveTrainMotors.setSensitivity(0.5);
        driveTrainMotors.setMaxOutput(1.0);
        driveTrainMotors.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        loadermotor = new Talon(4);
        LiveWindow.addActuator("Loader", "motor", (Talon) loadermotor);
        
        launcherwinchMotor = new CANTalon(0);
        LiveWindow.addActuator("Launcher", "winchMotor", launcherwinchMotor);
        
        launcherreleaseMotor = new VictorSP(5);
        LiveWindow.addActuator("Launcher", "releaseMotor", (VictorSP) launcherreleaseMotor);
        
        launcherwinchRotations = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Launcher", "winchRotations", launcherwinchRotations);
        launcherwinchRotations.setDistancePerPulse(1.0);
        launcherwinchRotations.setPIDSourceType(PIDSourceType.kRate);
        scalingArmturretMotor = new VictorSP(2);
        LiveWindow.addActuator("ScalingArm", "turretMotor", (VictorSP) scalingArmturretMotor);
        
        scalingArmextendMotor = new VictorSP(3);
        LiveWindow.addActuator("ScalingArm", "extendMotor", (VictorSP) scalingArmextendMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
