// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Stronghold.subsystems;

import org.usfirst.frc5506.Stronghold.RobotMap;
import org.usfirst.frc5506.Stronghold.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftMotor = RobotMap.driveTrainLeftMotor;
    private final CANTalon rightMotor = RobotMap.driveTrainRightMotor;
    private final RobotDrive motors = RobotMap.driveTrainMotors;
    private final Encoder wheelRotations = RobotMap.driveTrainwheelRotations;
    private final AnalogGyro gyro = RobotMap.driveTraingyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public RobotDrive getMotors() {
    	return motors;
    }
    
    public CANTalon getLeftMotor() {
    	return leftMotor;
    }
    
    public CANTalon getRightMotor() {
    	return rightMotor;
    }
    
    /**
     * Drive the robot
     * @param forwardSpeed the speed forwards or backwards, between -1 and 1
     * @param turningSpeed the speed to the left or right, left being 1 and right being -1
     */
    public void drive(double forwardSpeed, double turningSpeed) {
    	motors.arcadeDrive(forwardSpeed, turningSpeed);
    }
}

