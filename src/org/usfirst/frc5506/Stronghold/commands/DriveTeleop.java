// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Stronghold.commands;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Joystick.RumbleType;
import edu.wpi.first.wpilibj.command.Command;
import sun.security.x509.IssuingDistributionPointExtension;

import org.usfirst.frc5506.Stronghold.Robot;

/**
 *
 */
public class DriveTeleop extends Command {
	public boolean useTank = true;
	public boolean isHoldingButton = false;
	public double threshold = 0.03; // minimum power of forward motor power, turning speed, and forklift motor

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveTeleop() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }
    
    /*private double curveDuration = 25; // duration of curve in frames (frame = 20ms)
    private double currentTime = 0;
    private double turningTime = 0;
    
    private double stepCurve() { // returns multiplier between 0 and 1
    	if (currentTime < curveDuration) {
    		currentTime++;
    		return Math.pow(currentTime / curveDuration, 3);
    	} else {
    		return 1;
    	}
    }
    
    private double stepTurning() {
    	if (turningTime < curveDuration) {
    		turningTime++;
    		return Math.pow(turningTime / curveDuration, 3);
    	} else {
    		return 1;
    	}
    }
    
    private double cos45 = Math.cos(Math.toRadians(45));*/

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	/* NOTE ABOUT TANK CONTROLS
    	 * 		(read before you yell/murder)
    	 * 
    	 * The robot will use ARCADE DRIVE by default
    	 * It will toggle between ARCADE DRIVE and TANK CONTROLS, ONLY when you press in the {CLassified button}
    	 * 
    	 * This means that the code can adapt to driver preference
    	 * Austin added this in because driving a tank with tank controls makes more sense and has way more control-@bosswave
    	 * 
    	 * THIS WILL NOT AFFECT PEOPLE WHO USE ARCADE DRIVE (Noah)
    	 */
    	if (Robot.oi.getDriverJoystick().getRawButton(9) && !isHoldingButton) {
    		isHoldingButton = true;
    		useTank = !useTank;
    	} else if (!Robot.oi.getDriverJoystick().getRawButton(9) && isHoldingButton) {
    		isHoldingButton = false;
    	}
    	if (useTank) {
	    	double leftSpeed = Robot.oi.getDriverJoystick().getRawAxis(1);
	    	double rightSpeed = Robot.oi.getDriverJoystick().getRawAxis(5);
	    	
	    	if (Math.abs(leftSpeed) >= threshold) {
	    		Robot.driveTrain.driveLeft(leftSpeed);
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, Math.abs((float) leftSpeed));
	    	} else {
	    		Robot.driveTrain.driveLeft(0);
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, 0);
	    	}
	    	if (Math.abs(rightSpeed) >= threshold) {
	    		Robot.driveTrain.driveRight(rightSpeed);
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, Math.abs((float) rightSpeed));
	    	} else {
	    		Robot.driveTrain.driveRight(0);
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, 0);
	    	}
    	} else {
        	double forwardSpeed = Robot.oi.getDriverJoystick().getY() * -1;
        	double turningSpeed = Robot.oi.getDriverJoystick().getX() * -1;
        	if (Math.abs(forwardSpeed) < threshold)
        		forwardSpeed = 0;
        	if (Math.abs(turningSpeed) < threshold)
        		turningSpeed = 0;
        	if (Math.abs(Robot.oi.getDriverJoystick().getX()) > Math.abs(Robot.oi.getDriverJoystick().getY())) {
            	Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, (float) Math.abs(Robot.oi.getDriverJoystick().getX()));
            	Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, (float) Math.abs(Robot.oi.getDriverJoystick().getX()));
        	} else {
            	Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, (float) Math.abs(Robot.oi.getDriverJoystick().getY()));
            	Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, (float) Math.abs(Robot.oi.getDriverJoystick().getY()));
        	}
        	Robot.driveTrain.drive(forwardSpeed, turningSpeed);
    	}
    	//KAT_MAN123 Wuz H3rE!!
    	double liftSpeed = (Robot.oi.getDriverJoystick().getRawAxis(3) - Robot.oi.getDriverJoystick().getRawAxis(2));
    	if (Math.abs(liftSpeed) < threshold) {
    		liftSpeed = 0.3;
    	} else if (liftSpeed < 0) { // slow down speed if moving up
    		liftSpeed *= 0.25;
    	}
    	Robot.loader.getMotor().set(liftSpeed);
    	
    	// This can be moved to a LauncherTeleop command later
    	boolean a = Robot.oi.getDriverJoystick().getRawButton(1);
    	boolean b = Robot.oi.getDriverJoystick().getRawButton(2);
    	double winchSpeed = 0;
    	if (a)
    		winchSpeed -= 1;
    	if (b)
    		winchSpeed += 1;
    	Robot.launcher.getLaunchingMotor().set(winchSpeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
